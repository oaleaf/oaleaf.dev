import{S as Be,i as Fe,s as Ue,C as Vt,w as Ve,x as ze,y as Ze,z as Ge,A as zp,q as Je,o as Ke,B as Qe,Q as Zp,e,t as c,k as i,c as o,a as l,h as u,d as s,m as k,R as Xe,b as r,g as t,J as p,K as Ye}from"./vendor-57574a9d.js";import{B as no}from"./blog_article_layout-3a480b77.js";function so(kn){let f,w,y,h,m,g,T,rn,Zt,us,q,ya,is,fn,ha,ks,I,Gp=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typing-container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typed-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    This is the typed text
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>caret<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>to-type-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    This is the remaining text
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,rs,_,_a,Bn,Ea,xa,Fn,ba,Pa,fs,mn,gn,Ta,ms,O,La,gs,vn,Ma,vs,dn,Ha,ds,$,Jp=`<code class="language-tsx"><span class="token keyword">const</span> <span class="token constant">CPM</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// characters per minute; 70WPM roughly</span>
<span class="token comment">// means about ~380 CPM, but people</span>
<span class="token comment">// read a lot faster than that so better set it higher</span>
<span class="token keyword">const</span> <span class="token constant">CPS</span> <span class="token operator">=</span> <span class="token constant">CPM</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// characters per second</span>

<span class="token keyword">const</span> <span class="token constant">INTERVAL_TIME</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token constant">CPS</span><span class="token punctuation">;</span> <span class="token comment">// 1000ms in a second, gives expression</span>
<span class="token comment">// for call to setInterval</span></code>`,ws,wn,Aa,ys,D,Kp=`<code class="language-tsx"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string">"The text we have to type"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> caretPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">let</span> timer<span class="token punctuation">;</span></code>`,hs,yn,Ca,_s,N,Qp=`<code class="language-tsx">timer <span class="token operator">=</span> <span class="token function">useInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		caretPos<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">INTERVAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Es,hn,Ra,xs,_n,qa,bs,S,Xp=`<code class="language-tsx"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string">"The text we have to type"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> caretPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">let</span> timer<span class="token punctuation">;</span>

<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right <span class="token operator">=</span> input<span class="token punctuation">;</span></code>`,Ps,En,Ia,Ts,j,Yp=`<code class="language-tsx">$<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	left <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> caretPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
	right <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>caretPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ls,xn,Oa,Ms,W,ne=`<code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typing-container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typed-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>left<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>caret<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>to-type-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>right<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Hs,E,$a,Un,Da,Na,Vn,Sa,ja,As,B,se=`<code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typing-container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typed-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">html</span></span> left<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>caret<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>to-type-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">html</span></span> right<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Cs,bn,Wa,Rs,F,Ba,Pn,Fa,qs,U,Ua,Is,L,Va,zn,za,Za,Os,V,ae='<code class="language-tsx"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string">"&lt;b>This text&lt;/b> is bold"</span><span class="token punctuation">;</span></code>',$s,M,Ga,Zn,Ja,Ka,Ds,z,te=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typing-container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typed-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>This
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>caret<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>to-type-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> is bold
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Ns,x,Qa,Gn,Xa,Ya,Jn,nt,st,Ss,Tn,at,js,Z,pe=`<code class="language-html">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typing-container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>typed-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>This<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>caret<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>to-type-text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> is bold
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Ws,Ln,tt,Bs,G,ee=`<code class="language-tsx"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">&#123;</span> tag<span class="token operator">:</span> <span class="token string">"b"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">"This text"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> closeTag<span class="token operator">:</span> <span class="token string">"b"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">"is bold"</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,Fs,Mn,pt,Us,J,oe=`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">TagAttrs</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Event</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// tag</span>
	tagAttrs<span class="token operator">?</span><span class="token operator">:</span> TagAttrs<span class="token punctuation">,</span> <span class="token comment">// tag attributes</span>
	close<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// whether this tag is quickly closed, e.g. the &#96;/&#96; in &#96;&lt;br />&#96;</span>
<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span>
	text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// the text</span>
<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span>
	closeTag<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// the tag to close</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Vs,Hn,et,zs,K,le=`<code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">fmt_tag</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	tagAttrs<span class="token operator">?</span><span class="token operator">:</span> TagAttrs<span class="token punctuation">,</span>
	close<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> attrs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>tagAttrs <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>attrs <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		attrs <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>attrs<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">const</span> closed <span class="token operator">=</span> tag<span class="token punctuation">.</span>close <span class="token operator">?</span> <span class="token string">'/'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tag<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>attrs<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>closed<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Zs,An,ot,Gs,Q,ce=`<code class="language-tsx"><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> Event<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> caretPos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> increasing<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> left<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> tagEnd<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> tagEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// tag_end is still desirable to have, to jump over it</span>

	<span class="token keyword">let</span> tag_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> end_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> event <span class="token keyword">of</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">let</span> nextLen<span class="token punctuation">;</span>
		<span class="token comment">// set nextLen and update tag stack</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			nextLen <span class="token operator">=</span> len <span class="token operator">+</span> event<span class="token punctuation">.</span>text<span class="token punctuation">.</span>len<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			nextLen <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token function">fmt_tag</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">.</span>close<span class="token punctuation">)</span> tag_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>closeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			nextLen <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>closeTag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

			tag_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// if the caret is in the current "event", then we found the end_stack</span>
		<span class="token comment">// (the stack we will use to build the tags).</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> caretPos <span class="token operator">&amp;&amp;</span> nextLen <span class="token operator">></span> caretPos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			end_stack <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>tag_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>tag <span class="token operator">||</span> event<span class="token punctuation">.</span>closeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				tag_end <span class="token operator">=</span> increasing <span class="token operator">?</span> nextLen <span class="token operator">:</span> len<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// actually add to left or right</span>
		<span class="token comment">// depending on caret position</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">>=</span> nextLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				left <span class="token operator">+=</span> event<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				left <span class="token operator">+=</span> <span class="token function">fmt_tag</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>closeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				left <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>closeTag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					left <span class="token operator">+=</span> event<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> caretPos <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
					right <span class="token operator">+=</span> event<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>caretPos <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					right <span class="token operator">+=</span> event<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					left <span class="token operator">+=</span> <span class="token function">fmt_tag</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					right <span class="token operator">+=</span> <span class="token function">fmt_tag</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>closeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					left <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>closeTag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					right <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>closeTag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>


		len <span class="token operator">=</span> nextLen<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// closing left tags and opening right tags:</span>
	<span class="token keyword">let</span> leftClosing <span class="token operator">=</span> end_stack<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> rightOpening <span class="token operator">=</span> end_stack<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fmt_tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
		left<span class="token operator">:</span> left <span class="token operator">+</span> leftClosing<span class="token punctuation">,</span>
		right<span class="token operator">:</span> rightOpening <span class="token operator">+</span> right<span class="token punctuation">,</span>
		tagEnd
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Js,Cn,lt,Ks,X,ue=`<code class="language-tsx"><span class="token keyword">const</span> computeLen <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> Events<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> event <span class="token keyword">of</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			len <span class="token operator">+=</span> event<span class="token punctuation">.</span>text<span class="token punctuation">.</span>len<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			len <span class="token operator">+=</span> <span class="token function">fmt_tag</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>closeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			len <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>closeTag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Qs,Rn,ct,Xs,Y,ie='<code class="language-tsx"><span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">computeLen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Ys,H,ut,Kn,it,kt,na,nn,ke=`<code class="language-tsx"><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right <span class="token operator">=</span> input<span class="token punctuation">;</span>
<span class="token keyword">let</span> tagEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code>`,sa,b,rt,Qn,ft,mt,Xn,gt,vt,aa,sn,re=`<code class="language-tsx">$<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> caretPos<span class="token punctuation">)</span><span class="token punctuation">;</span>

	left <span class="token operator">=</span> results<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
	right <span class="token operator">=</span> results<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
	tagEnd <span class="token operator">=</span> results<span class="token punctuation">.</span>tagEnd<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ta,qn,dt,pa,an,fe=`<code class="language-tsx">timer <span class="token operator">=</span> <span class="token function">useInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>caretPos <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>tagEnd <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> caretPos <span class="token operator">=</span> tagEnd<span class="token punctuation">;</span>
	<span class="token keyword">else</span> caretPos<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">INTERVAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ea,tn,wt,oa,pn,me=`<code class="language-css"><span class="token selector">.typed-text</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token selector">.to-type-text</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token selector">.caret</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span></code>`,la,P,yt,Yn,ht,_t,ns,Et,xt,ca,en,ge=`<code class="language-css"><span class="token selector">.typed-text</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-variant-ligatures</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.to-type-text</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-variant-ligatures</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ua,In,bt,ia,on,ve=`<code class="language-css"><span class="token selector">.to-type-text</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-variant-ligatures</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.3<span class="token punctuation">;</span> <span class="token comment">/* can be whatever you want */</span>
<span class="token punctuation">&#125;</span></code>`,ka,On,Pt,ra,ln,de=`<code class="language-css"><span class="token selector">.caret</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span> <span class="token comment">/* to not offset the text by the caret */</span>
<span class="token punctuation">&#125;</span></code>`,fa,$n,cn,Tt,ma,un,Lt,ga,v,d,Mt,ss,Ht,At,as,Ct,Rt,ts,qt,It,Ot,ps,$t,Dt,es,Nt,St,A,jt,os,Wt,Bt,ls,Ft;return{c(){f=e("p"),w=c(`In this blog post, I would like to show you how I wrote the \u201Ctyping container\u201D, show you some issues that arose, and
hopefully help you if you decide to implement something similar.`),y=i(),h=e("p"),m=c("So first, the typing container is the component that displays the text while \u201Ctyping\u201D:"),g=i(),T=e("p"),rn=e("img"),us=i(),q=e("h2"),ya=c("Approach"),is=i(),fn=e("p"),ha=c("We are going to split the text we are typing into 2 parts: the part we typed already and the part there is left to type:"),ks=i(),I=e("pre"),rs=i(),_=e("p"),_a=c("We are going to intuitively call those 2 parts "),Bn=e("code"),Ea=c("left"),xa=c(" and "),Fn=e("code"),ba=c("right"),Pa=c(`, as they are to the left and the right of the caret,
wherever that may be.`),fs=i(),mn=e("p"),gn=e("a"),Ta=c("We will do the styling at the end."),ms=i(),O=e("h2"),La=c("Implementation"),gs=i(),vn=e("p"),Ma=c("Now we have to go ahead and implement this:"),vs=i(),dn=e("p"),Ha=c("First, we have to define some constants:"),ds=i(),$=e("pre"),ws=i(),wn=e("p"),Aa=c("Now let\u2019s define some state:"),ys=i(),D=e("pre"),hs=i(),yn=e("p"),Ca=c("And set up the timer:"),_s=i(),N=e("pre"),Es=i(),hn=e("p"),Ra=c("Now, for the code to compute the text on the left and the right of the caret."),xs=i(),_n=e("p"),qa=c("Declare them in the list of state variables:"),bs=i(),S=e("pre"),Ps=i(),En=e("p"),Ia=c("And change them every time the caret moves:"),Ts=i(),j=e("pre"),Ls=i(),xn=e("p"),Oa=c("And display them in the HTML:"),Ms=i(),W=e("pre"),Hs=i(),E=e("p"),$a=c("Now this is fully functional, but not when you want to put tags in the text; we can change the above to "),Un=e("code"),Da=c("{@html left}"),Na=c(`
and `),Vn=e("code"),Sa=c("{@html right}"),ja=c(":"),As=i(),B=e("pre"),Cs=i(),bn=e("p"),Wa=c("But this also would not work, because the tags are still \u201Cbutchered\u201D, for the lack of a better word."),Rs=i(),F=e("p"),Ba=c("So we enter "),Pn=e("a"),Fa=c("challenge #1"),qs=i(),U=e("h2"),Ua=c("Challenge #1: Tags"),Is=i(),L=e("p"),Va=c("So let\u2019s say that "),zn=e("code"),za=c("input"),Za=c(" is:"),Os=i(),V=e("pre"),$s=i(),M=e("p"),Ga=c("We could just jump over tags when we encounter them when we do "),Zn=e("code"),Ja=c("caretPos++"),Ka=c(` in the interval, but that would not work, as
this is what the browser will end up seeing
(when the caret is on the first space):`),Ds=i(),z=e("pre"),Ns=i(),x=e("p"),Qa=c("A strategy that works however, is closing all the tags in "),Gn=e("code"),Xa=c("left"),Ya=c(`, and then reopening all of them before any character
in `),Jn=e("code"),nt=c("right"),st=c("."),Ss=i(),Tn=e("p"),at=c("This would give us:"),js=i(),Z=e("pre"),Ws=i(),Ln=e("p"),tt=c(`This requires us to be aware of where there is a tag, and where there isn\u2019t, so we will change our input format a
little:`),Bs=i(),G=e("pre"),Fs=i(),Mn=e("p"),pt=c("Let\u2019s also give some types to this:"),Us=i(),J=e("pre"),Vs=i(),Hn=e("p"),et=c("Then a basic utility to render a tag to HTML:"),zs=i(),K=e("pre"),Zs=i(),An=e("p"),ot=c("Now for rendering:"),Gs=i(),Q=e("pre"),Js=i(),Cn=e("p"),lt=c("But we also have to know the length of the input, to know when we reach the end."),Ks=i(),X=e("pre"),Qs=i(),Rn=e("p"),ct=c("And then use that for the input length:"),Xs=i(),Y=e("pre"),Ys=i(),H=e("p"),ut=c("Let\u2019s now add the "),Kn=e("code"),it=c("tagEnd"),kt=c(" state variable:"),na=i(),nn=e("pre"),sa=i(),b=e("p"),rt=c("And then changing the computation of the "),Qn=e("code"),ft=c("left"),mt=c(" and "),Xn=e("code"),gt=c("right"),vt=c(" vars:"),aa=i(),sn=e("pre"),ta=i(),qn=e("p"),dt=c("And then change the interval code:"),pa=i(),an=e("pre"),ea=i(),tn=e("h2"),wt=c("Styling"),oa=i(),pn=e("pre"),la=i(),P=e("p"),yt=c("For the "),Yn=e("code"),ht=c(".typed-text"),_t=c(" and "),ns=e("code"),Et=c(".to-type-text"),xt=c(", we only have to hint the browser not to use font ligatures:"),ca=i(),en=e("pre"),ua=i(),In=e("p"),bt=c("And decrease opacity of the text we have to type:"),ia=i(),on=e("pre"),ka=i(),On=e("p"),Pt=c("Next comes the caret:"),ra=i(),ln=e("pre"),fa=i(),$n=e("p"),cn=e("a"),Tt=c("Full component implementation"),ma=i(),un=e("h2"),Lt=c("Where to go from here"),ga=i(),v=e("ul"),d=e("li"),Mt=c("Type text and then delete and loop (pass "),ss=e("code"),Ht=c("increase = false"),At=c(" to "),as=e("code"),Ct=c("render"),Rt=c(" to get the correct "),ts=e("code"),qt=c("tagEnd"),It=c(`) + loop through
multiple texts + make deleting faster than typing`),Ot=i(),ps=e("li"),$t=c(`Make the caret stationary for a little while at the end
(or both ends if you did the previous)`),Dt=i(),es=e("li"),Nt=c("While the caret is stationary, implement a caret animation"),St=i(),A=e("li"),jt=c("Use a html parser to get the "),os=e("code"),Wt=c("Event[]"),Bt=c(" from a "),ls=e("code"),Ft=c("string"),this.h()},l(n){f=o(n,"P",{});var a=l(f);w=u(a,`In this blog post, I would like to show you how I wrote the \u201Ctyping container\u201D, show you some issues that arose, and
hopefully help you if you decide to implement something similar.`),a.forEach(s),y=k(n),h=o(n,"P",{});var Gt=l(h);m=u(Gt,"So first, the typing container is the component that displays the text while \u201Ctyping\u201D:"),Gt.forEach(s),g=k(n),T=o(n,"P",{});var Jt=l(T);rn=o(Jt,"IMG",{src:!0,alt:!0}),Jt.forEach(s),us=k(n),q=o(n,"H2",{id:!0});var Kt=l(q);ya=u(Kt,"Approach"),Kt.forEach(s),is=k(n),fn=o(n,"P",{});var Qt=l(fn);ha=u(Qt,"We are going to split the text we are typing into 2 parts: the part we typed already and the part there is left to type:"),Qt.forEach(s),ks=k(n),I=o(n,"PRE",{class:!0});var we=l(I);we.forEach(s),rs=k(n),_=o(n,"P",{});var Dn=l(_);_a=u(Dn,"We are going to intuitively call those 2 parts "),Bn=o(Dn,"CODE",{});var Xt=l(Bn);Ea=u(Xt,"left"),Xt.forEach(s),xa=u(Dn," and "),Fn=o(Dn,"CODE",{});var Yt=l(Fn);ba=u(Yt,"right"),Yt.forEach(s),Pa=u(Dn,`, as they are to the left and the right of the caret,
wherever that may be.`),Dn.forEach(s),fs=k(n),mn=o(n,"P",{});var np=l(mn);gn=o(np,"A",{href:!0});var sp=l(gn);Ta=u(sp,"We will do the styling at the end."),sp.forEach(s),np.forEach(s),ms=k(n),O=o(n,"H2",{id:!0});var ap=l(O);La=u(ap,"Implementation"),ap.forEach(s),gs=k(n),vn=o(n,"P",{});var tp=l(vn);Ma=u(tp,"Now we have to go ahead and implement this:"),tp.forEach(s),vs=k(n),dn=o(n,"P",{});var pp=l(dn);Ha=u(pp,"First, we have to define some constants:"),pp.forEach(s),ds=k(n),$=o(n,"PRE",{class:!0});var ye=l($);ye.forEach(s),ws=k(n),wn=o(n,"P",{});var ep=l(wn);Aa=u(ep,"Now let\u2019s define some state:"),ep.forEach(s),ys=k(n),D=o(n,"PRE",{class:!0});var he=l(D);he.forEach(s),hs=k(n),yn=o(n,"P",{});var op=l(yn);Ca=u(op,"And set up the timer:"),op.forEach(s),_s=k(n),N=o(n,"PRE",{class:!0});var _e=l(N);_e.forEach(s),Es=k(n),hn=o(n,"P",{});var lp=l(hn);Ra=u(lp,"Now, for the code to compute the text on the left and the right of the caret."),lp.forEach(s),xs=k(n),_n=o(n,"P",{});var cp=l(_n);qa=u(cp,"Declare them in the list of state variables:"),cp.forEach(s),bs=k(n),S=o(n,"PRE",{class:!0});var Ee=l(S);Ee.forEach(s),Ps=k(n),En=o(n,"P",{});var up=l(En);Ia=u(up,"And change them every time the caret moves:"),up.forEach(s),Ts=k(n),j=o(n,"PRE",{class:!0});var xe=l(j);xe.forEach(s),Ls=k(n),xn=o(n,"P",{});var ip=l(xn);Oa=u(ip,"And display them in the HTML:"),ip.forEach(s),Ms=k(n),W=o(n,"PRE",{class:!0});var be=l(W);be.forEach(s),Hs=k(n),E=o(n,"P",{});var Nn=l(E);$a=u(Nn,"Now this is fully functional, but not when you want to put tags in the text; we can change the above to "),Un=o(Nn,"CODE",{});var kp=l(Un);Da=u(kp,"{@html left}"),kp.forEach(s),Na=u(Nn,`
and `),Vn=o(Nn,"CODE",{});var rp=l(Vn);Sa=u(rp,"{@html right}"),rp.forEach(s),ja=u(Nn,":"),Nn.forEach(s),As=k(n),B=o(n,"PRE",{class:!0});var Pe=l(B);Pe.forEach(s),Cs=k(n),bn=o(n,"P",{});var fp=l(bn);Wa=u(fp,"But this also would not work, because the tags are still \u201Cbutchered\u201D, for the lack of a better word."),fp.forEach(s),Rs=k(n),F=o(n,"P",{});var Ut=l(F);Ba=u(Ut,"So we enter "),Pn=o(Ut,"A",{href:!0});var mp=l(Pn);Fa=u(mp,"challenge #1"),mp.forEach(s),Ut.forEach(s),qs=k(n),U=o(n,"H2",{id:!0});var gp=l(U);Ua=u(gp,"Challenge #1: Tags"),gp.forEach(s),Is=k(n),L=o(n,"P",{});var va=l(L);Va=u(va,"So let\u2019s say that "),zn=o(va,"CODE",{});var vp=l(zn);za=u(vp,"input"),vp.forEach(s),Za=u(va," is:"),va.forEach(s),Os=k(n),V=o(n,"PRE",{class:!0});var Te=l(V);Te.forEach(s),$s=k(n),M=o(n,"P",{});var da=l(M);Ga=u(da,"We could just jump over tags when we encounter them when we do "),Zn=o(da,"CODE",{});var dp=l(Zn);Ja=u(dp,"caretPos++"),dp.forEach(s),Ka=u(da,` in the interval, but that would not work, as
this is what the browser will end up seeing
(when the caret is on the first space):`),da.forEach(s),Ds=k(n),z=o(n,"PRE",{class:!0});var Le=l(z);Le.forEach(s),Ns=k(n),x=o(n,"P",{});var Sn=l(x);Qa=u(Sn,"A strategy that works however, is closing all the tags in "),Gn=o(Sn,"CODE",{});var wp=l(Gn);Xa=u(wp,"left"),wp.forEach(s),Ya=u(Sn,`, and then reopening all of them before any character
in `),Jn=o(Sn,"CODE",{});var yp=l(Jn);nt=u(yp,"right"),yp.forEach(s),st=u(Sn,"."),Sn.forEach(s),Ss=k(n),Tn=o(n,"P",{});var hp=l(Tn);at=u(hp,"This would give us:"),hp.forEach(s),js=k(n),Z=o(n,"PRE",{class:!0});var Me=l(Z);Me.forEach(s),Ws=k(n),Ln=o(n,"P",{});var _p=l(Ln);tt=u(_p,`This requires us to be aware of where there is a tag, and where there isn\u2019t, so we will change our input format a
little:`),_p.forEach(s),Bs=k(n),G=o(n,"PRE",{class:!0});var He=l(G);He.forEach(s),Fs=k(n),Mn=o(n,"P",{});var Ep=l(Mn);pt=u(Ep,"Let\u2019s also give some types to this:"),Ep.forEach(s),Us=k(n),J=o(n,"PRE",{class:!0});var Ae=l(J);Ae.forEach(s),Vs=k(n),Hn=o(n,"P",{});var xp=l(Hn);et=u(xp,"Then a basic utility to render a tag to HTML:"),xp.forEach(s),zs=k(n),K=o(n,"PRE",{class:!0});var Ce=l(K);Ce.forEach(s),Zs=k(n),An=o(n,"P",{});var bp=l(An);ot=u(bp,"Now for rendering:"),bp.forEach(s),Gs=k(n),Q=o(n,"PRE",{class:!0});var Re=l(Q);Re.forEach(s),Js=k(n),Cn=o(n,"P",{});var Pp=l(Cn);lt=u(Pp,"But we also have to know the length of the input, to know when we reach the end."),Pp.forEach(s),Ks=k(n),X=o(n,"PRE",{class:!0});var qe=l(X);qe.forEach(s),Qs=k(n),Rn=o(n,"P",{});var Tp=l(Rn);ct=u(Tp,"And then use that for the input length:"),Tp.forEach(s),Xs=k(n),Y=o(n,"PRE",{class:!0});var Ie=l(Y);Ie.forEach(s),Ys=k(n),H=o(n,"P",{});var wa=l(H);ut=u(wa,"Let\u2019s now add the "),Kn=o(wa,"CODE",{});var Lp=l(Kn);it=u(Lp,"tagEnd"),Lp.forEach(s),kt=u(wa," state variable:"),wa.forEach(s),na=k(n),nn=o(n,"PRE",{class:!0});var Oe=l(nn);Oe.forEach(s),sa=k(n),b=o(n,"P",{});var jn=l(b);rt=u(jn,"And then changing the computation of the "),Qn=o(jn,"CODE",{});var Mp=l(Qn);ft=u(Mp,"left"),Mp.forEach(s),mt=u(jn," and "),Xn=o(jn,"CODE",{});var Hp=l(Xn);gt=u(Hp,"right"),Hp.forEach(s),vt=u(jn," vars:"),jn.forEach(s),aa=k(n),sn=o(n,"PRE",{class:!0});var $e=l(sn);$e.forEach(s),ta=k(n),qn=o(n,"P",{});var Ap=l(qn);dt=u(Ap,"And then change the interval code:"),Ap.forEach(s),pa=k(n),an=o(n,"PRE",{class:!0});var De=l(an);De.forEach(s),ea=k(n),tn=o(n,"H2",{id:!0});var Cp=l(tn);wt=u(Cp,"Styling"),Cp.forEach(s),oa=k(n),pn=o(n,"PRE",{class:!0});var Ne=l(pn);Ne.forEach(s),la=k(n),P=o(n,"P",{});var Wn=l(P);yt=u(Wn,"For the "),Yn=o(Wn,"CODE",{});var Rp=l(Yn);ht=u(Rp,".typed-text"),Rp.forEach(s),_t=u(Wn," and "),ns=o(Wn,"CODE",{});var qp=l(ns);Et=u(qp,".to-type-text"),qp.forEach(s),xt=u(Wn,", we only have to hint the browser not to use font ligatures:"),Wn.forEach(s),ca=k(n),en=o(n,"PRE",{class:!0});var Se=l(en);Se.forEach(s),ua=k(n),In=o(n,"P",{});var Ip=l(In);bt=u(Ip,"And decrease opacity of the text we have to type:"),Ip.forEach(s),ia=k(n),on=o(n,"PRE",{class:!0});var je=l(on);je.forEach(s),ka=k(n),On=o(n,"P",{});var Op=l(On);Pt=u(Op,"Next comes the caret:"),Op.forEach(s),ra=k(n),ln=o(n,"PRE",{class:!0});var We=l(ln);We.forEach(s),fa=k(n),$n=o(n,"P",{});var $p=l($n);cn=o($p,"A",{href:!0,rel:!0});var Dp=l(cn);Tt=u(Dp,"Full component implementation"),Dp.forEach(s),$p.forEach(s),ma=k(n),un=o(n,"H2",{id:!0});var Np=l(un);Lt=u(Np,"Where to go from here"),Np.forEach(s),ga=k(n),v=o(n,"UL",{});var C=l(v);d=o(C,"LI",{});var R=l(d);Mt=u(R,"Type text and then delete and loop (pass "),ss=o(R,"CODE",{});var Sp=l(ss);Ht=u(Sp,"increase = false"),Sp.forEach(s),At=u(R," to "),as=o(R,"CODE",{});var jp=l(as);Ct=u(jp,"render"),jp.forEach(s),Rt=u(R," to get the correct "),ts=o(R,"CODE",{});var Wp=l(ts);qt=u(Wp,"tagEnd"),Wp.forEach(s),It=u(R,`) + loop through
multiple texts + make deleting faster than typing`),R.forEach(s),Ot=k(C),ps=o(C,"LI",{});var Bp=l(ps);$t=u(Bp,`Make the caret stationary for a little while at the end
(or both ends if you did the previous)`),Bp.forEach(s),Dt=k(C),es=o(C,"LI",{});var Fp=l(es);Nt=u(Fp,"While the caret is stationary, implement a caret animation"),Fp.forEach(s),St=k(C),A=o(C,"LI",{});var cs=l(A);jt=u(cs,"Use a html parser to get the "),os=o(cs,"CODE",{});var Up=l(os);Wt=u(Up,"Event[]"),Up.forEach(s),Bt=u(cs," from a "),ls=o(cs,"CODE",{});var Vp=l(ls);Ft=u(Vp,"string"),Vp.forEach(s),cs.forEach(s),C.forEach(s),this.h()},h(){Xe(rn.src,Zt="/typing.png")||r(rn,"src",Zt),r(rn,"alt","img.png"),r(q,"id","approach"),r(I,"class","language-html"),r(gn,"href","#styling"),r(O,"id","implementation"),r($,"class","language-tsx"),r(D,"class","language-tsx"),r(N,"class","language-tsx"),r(S,"class","language-tsx"),r(j,"class","language-tsx"),r(W,"class","language-tsx"),r(B,"class","language-tsx"),r(Pn,"href","#challenge-1-tags"),r(U,"id","challenge-1-tags"),r(V,"class","language-tsx"),r(z,"class","language-html"),r(Z,"class","language-html"),r(G,"class","language-tsx"),r(J,"class","language-ts"),r(K,"class","language-tsx"),r(Q,"class","language-tsx"),r(X,"class","language-tsx"),r(Y,"class","language-tsx"),r(nn,"class","language-tsx"),r(sn,"class","language-tsx"),r(an,"class","language-tsx"),r(tn,"id","styling"),r(pn,"class","language-css"),r(en,"class","language-css"),r(on,"class","language-css"),r(ln,"class","language-css"),r(cn,"href","https://github.com/oaleaf/oaleaf.dev/blob/trunk/src/lib/TypingContainer.svelte"),r(cn,"rel","nofollow"),r(un,"id","where-to-go-from-here")},m(n,a){t(n,f,a),p(f,w),t(n,y,a),t(n,h,a),p(h,m),t(n,g,a),t(n,T,a),p(T,rn),t(n,us,a),t(n,q,a),p(q,ya),t(n,is,a),t(n,fn,a),p(fn,ha),t(n,ks,a),t(n,I,a),I.innerHTML=Gp,t(n,rs,a),t(n,_,a),p(_,_a),p(_,Bn),p(Bn,Ea),p(_,xa),p(_,Fn),p(Fn,ba),p(_,Pa),t(n,fs,a),t(n,mn,a),p(mn,gn),p(gn,Ta),t(n,ms,a),t(n,O,a),p(O,La),t(n,gs,a),t(n,vn,a),p(vn,Ma),t(n,vs,a),t(n,dn,a),p(dn,Ha),t(n,ds,a),t(n,$,a),$.innerHTML=Jp,t(n,ws,a),t(n,wn,a),p(wn,Aa),t(n,ys,a),t(n,D,a),D.innerHTML=Kp,t(n,hs,a),t(n,yn,a),p(yn,Ca),t(n,_s,a),t(n,N,a),N.innerHTML=Qp,t(n,Es,a),t(n,hn,a),p(hn,Ra),t(n,xs,a),t(n,_n,a),p(_n,qa),t(n,bs,a),t(n,S,a),S.innerHTML=Xp,t(n,Ps,a),t(n,En,a),p(En,Ia),t(n,Ts,a),t(n,j,a),j.innerHTML=Yp,t(n,Ls,a),t(n,xn,a),p(xn,Oa),t(n,Ms,a),t(n,W,a),W.innerHTML=ne,t(n,Hs,a),t(n,E,a),p(E,$a),p(E,Un),p(Un,Da),p(E,Na),p(E,Vn),p(Vn,Sa),p(E,ja),t(n,As,a),t(n,B,a),B.innerHTML=se,t(n,Cs,a),t(n,bn,a),p(bn,Wa),t(n,Rs,a),t(n,F,a),p(F,Ba),p(F,Pn),p(Pn,Fa),t(n,qs,a),t(n,U,a),p(U,Ua),t(n,Is,a),t(n,L,a),p(L,Va),p(L,zn),p(zn,za),p(L,Za),t(n,Os,a),t(n,V,a),V.innerHTML=ae,t(n,$s,a),t(n,M,a),p(M,Ga),p(M,Zn),p(Zn,Ja),p(M,Ka),t(n,Ds,a),t(n,z,a),z.innerHTML=te,t(n,Ns,a),t(n,x,a),p(x,Qa),p(x,Gn),p(Gn,Xa),p(x,Ya),p(x,Jn),p(Jn,nt),p(x,st),t(n,Ss,a),t(n,Tn,a),p(Tn,at),t(n,js,a),t(n,Z,a),Z.innerHTML=pe,t(n,Ws,a),t(n,Ln,a),p(Ln,tt),t(n,Bs,a),t(n,G,a),G.innerHTML=ee,t(n,Fs,a),t(n,Mn,a),p(Mn,pt),t(n,Us,a),t(n,J,a),J.innerHTML=oe,t(n,Vs,a),t(n,Hn,a),p(Hn,et),t(n,zs,a),t(n,K,a),K.innerHTML=le,t(n,Zs,a),t(n,An,a),p(An,ot),t(n,Gs,a),t(n,Q,a),Q.innerHTML=ce,t(n,Js,a),t(n,Cn,a),p(Cn,lt),t(n,Ks,a),t(n,X,a),X.innerHTML=ue,t(n,Qs,a),t(n,Rn,a),p(Rn,ct),t(n,Xs,a),t(n,Y,a),Y.innerHTML=ie,t(n,Ys,a),t(n,H,a),p(H,ut),p(H,Kn),p(Kn,it),p(H,kt),t(n,na,a),t(n,nn,a),nn.innerHTML=ke,t(n,sa,a),t(n,b,a),p(b,rt),p(b,Qn),p(Qn,ft),p(b,mt),p(b,Xn),p(Xn,gt),p(b,vt),t(n,aa,a),t(n,sn,a),sn.innerHTML=re,t(n,ta,a),t(n,qn,a),p(qn,dt),t(n,pa,a),t(n,an,a),an.innerHTML=fe,t(n,ea,a),t(n,tn,a),p(tn,wt),t(n,oa,a),t(n,pn,a),pn.innerHTML=me,t(n,la,a),t(n,P,a),p(P,yt),p(P,Yn),p(Yn,ht),p(P,_t),p(P,ns),p(ns,Et),p(P,xt),t(n,ca,a),t(n,en,a),en.innerHTML=ge,t(n,ua,a),t(n,In,a),p(In,bt),t(n,ia,a),t(n,on,a),on.innerHTML=ve,t(n,ka,a),t(n,On,a),p(On,Pt),t(n,ra,a),t(n,ln,a),ln.innerHTML=de,t(n,fa,a),t(n,$n,a),p($n,cn),p(cn,Tt),t(n,ma,a),t(n,un,a),p(un,Lt),t(n,ga,a),t(n,v,a),p(v,d),p(d,Mt),p(d,ss),p(ss,Ht),p(d,At),p(d,as),p(as,Ct),p(d,Rt),p(d,ts),p(ts,qt),p(d,It),p(v,Ot),p(v,ps),p(ps,$t),p(v,Dt),p(v,es),p(es,Nt),p(v,St),p(v,A),p(A,jt),p(A,os),p(os,Wt),p(A,Bt),p(A,ls),p(ls,Ft)},p:Ye,d(n){n&&s(f),n&&s(y),n&&s(h),n&&s(g),n&&s(T),n&&s(us),n&&s(q),n&&s(is),n&&s(fn),n&&s(ks),n&&s(I),n&&s(rs),n&&s(_),n&&s(fs),n&&s(mn),n&&s(ms),n&&s(O),n&&s(gs),n&&s(vn),n&&s(vs),n&&s(dn),n&&s(ds),n&&s($),n&&s(ws),n&&s(wn),n&&s(ys),n&&s(D),n&&s(hs),n&&s(yn),n&&s(_s),n&&s(N),n&&s(Es),n&&s(hn),n&&s(xs),n&&s(_n),n&&s(bs),n&&s(S),n&&s(Ps),n&&s(En),n&&s(Ts),n&&s(j),n&&s(Ls),n&&s(xn),n&&s(Ms),n&&s(W),n&&s(Hs),n&&s(E),n&&s(As),n&&s(B),n&&s(Cs),n&&s(bn),n&&s(Rs),n&&s(F),n&&s(qs),n&&s(U),n&&s(Is),n&&s(L),n&&s(Os),n&&s(V),n&&s($s),n&&s(M),n&&s(Ds),n&&s(z),n&&s(Ns),n&&s(x),n&&s(Ss),n&&s(Tn),n&&s(js),n&&s(Z),n&&s(Ws),n&&s(Ln),n&&s(Bs),n&&s(G),n&&s(Fs),n&&s(Mn),n&&s(Us),n&&s(J),n&&s(Vs),n&&s(Hn),n&&s(zs),n&&s(K),n&&s(Zs),n&&s(An),n&&s(Gs),n&&s(Q),n&&s(Js),n&&s(Cn),n&&s(Ks),n&&s(X),n&&s(Qs),n&&s(Rn),n&&s(Xs),n&&s(Y),n&&s(Ys),n&&s(H),n&&s(na),n&&s(nn),n&&s(sa),n&&s(b),n&&s(aa),n&&s(sn),n&&s(ta),n&&s(qn),n&&s(pa),n&&s(an),n&&s(ea),n&&s(tn),n&&s(oa),n&&s(pn),n&&s(la),n&&s(P),n&&s(ca),n&&s(en),n&&s(ua),n&&s(In),n&&s(ia),n&&s(on),n&&s(ka),n&&s(On),n&&s(ra),n&&s(ln),n&&s(fa),n&&s($n),n&&s(ma),n&&s(un),n&&s(ga),n&&s(v)}}}function ao(kn){let f,w;const y=[kn[0],zt];let h={$$slots:{default:[so]},$$scope:{ctx:kn}};for(let m=0;m<y.length;m+=1)h=Vt(h,y[m]);return f=new no({props:h}),{c(){Ve(f.$$.fragment)},l(m){ze(f.$$.fragment,m)},m(m,g){Ze(f,m,g),w=!0},p(m,[g]){const T=g&1?Ge(y,[g&1&&zp(m[0]),g&0&&zp(zt)]):{};g&2&&(T.$$scope={dirty:g,ctx:m}),f.$set(T)},i(m){w||(Je(f.$$.fragment,m),w=!0)},o(m){Ke(f.$$.fragment,m),w=!1},d(m){Qe(f,m)}}}const zt={title:"Implementing the typing container (in Svelte)",date:"2022-01-27T00:00:00.000Z",editedOn:"2022-02-10T00:00:00.000Z",author:"oaleaf",tags:["code","js"],category:"site",preview:"/typing.png",ref:"typing-container",similar:["typing-container"],layout:"blog_article"};function to(kn,f,w){return kn.$$set=y=>{w(0,f=Vt(Vt({},f),Zp(y)))},f=Zp(f),[f]}class po extends Be{constructor(f){super();Fe(this,f,to,ao,Ue,{})}}var lo=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:po,metadata:zt});export{po as T,lo as _,zt as m};
